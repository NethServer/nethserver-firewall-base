#!/usr/bin/php
<?php
/*
 * Copyright (C) 2019 Nethesis S.r.l.
 * http://www.nethesis.it - nethserver@nethesis.it
 *
 * This script is part of NethServer.
 *
 * NethServer is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License,
 * or any later version.
 *
 * NethServer is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with NethServer.  If not, see COPYING.
*/

require_once("/usr/libexec/nethserver/api/lib/Helpers.php");

$data = readInput();
$action = $data['action'];

$v = new LegacyValidator($data);
$db = new EsmithDatabase('portforward');


switch ($action) {

case "delete":

    if (!$db->getKey($data['name'])) {
        $v->addValidationError('name', 'non_existing_port-forward', $data['name']);
    }
    break;

case "update":
case "create":

    if ( $action == "update" ) {
        if (!$db->getKey($data['name'])) {
            $v->addValidationError('name', 'non_existing_port-forward', $data['name']);
        }
    } elseif ( $action == "create" ) {
        if ($db->getKey($data['name'])) {
            $v->addValidationError('name', 'port-forward_exists', $data['name']);
        }
    }


    $protocols = array('tcpudp', 'tcp', 'udp', 'gre', 'ah', 'esp');
    $protoValidator = $v->createValidator()->memberOf($protocols);

    $portRangeValidator = $v->createValidator()
        ->orValidator(
            $v->createValidator(Validate::PORTNUMBER),
            $v->createValidator()->regexp('/^[0-9]+\:[0-9]+$/') #port range, no check on maximum value
        );

    $dstValidator = $v->createValidator()
        ->orValidator(
            $v->createValidator(Validate::PORTNUMBER),
            $v->createValidator()->isEmpty()
        );

    $logValidator = $v->createValidator()->memberOf(array("none","info"));


    $v->declareParameter('Proto', $protoValidator);
    $v->declareParameter('Dst', $dstValidator);

    $ip_v = $v->createValidator(Validate::IPv4);
    $cidr_v = $v->createValidator(Validate::CIDR_BLOCK);
    $ip_cidr_v = $v->createValidator()->orValidator($ip_v, $cidr_v);
    if ($data['DstHost']['type'] == 'raw') {
        # Check raw value. Eg: {"name": "192.168.1.1", "type": "raw"}
        if (!$ip_cidr_v->evaluate($data['DstHost']['name'])) {
            $v->addValidationError('DstHost', 'valid_ip_or_cidr', $data['DstHost']);
        }
    } else {
        # Check if object exists
        $objv = $v->createValidator()->platform('firewall-object-exists');
        if (!$objv->evaluate($data['DstHost']['type'].";".$data['DstHost']['name'])) {
            $v->addValidationError('DstHost', 'host_doesnt_exists');
        }
    }

    $v->declareParameter('OriDst', Validate::IPv4_OR_EMPTY);
    $v->declareParameter('status', Validate::SERVICESTATUS);
    $v->declareParameter('Description', $v->createValidator()->maxLength(35));
    $v->declareParameter('Log', $logValidator);

    $ipCidrAllow = $v->createValidator()
        ->orValidator(
            $v->createValidator(Validate::IPv4),
            $v->createValidator(Validate::CIDR_BLOCK)
        );

    foreach ( $data['Allow'] as $el) {
        if (!$ipCidrAllow->evaluate($el) ) {
            $v->addValidationError('Allow', 'Not_valid_ipV4Address_or_CIDR', $el);
        }
    }

    if (is_array($data['Src'])) {
        foreach ($data['Src'] as $el) {
            if (!$portRangeValidator->evaluate($el)) {
                $v->addValidationError('Src', 'port_number_or_port_range');
            }
        }
    } else {
        $v->addValidationError('Src', 'must_be_an_array');
    }
    if (!preg_match("/tcp|udp/", $data['Proto'])) {
        if ($data['Src'] || $data['Dst']) {
            $v->addValidationError('Src', 'protocol_doesnt_support_ports');
        }
    }

    break;
default:
    error();
    break;
}

# Validate the input
if ($v->validate()) {
    success();
} else {
    error($v);
}
