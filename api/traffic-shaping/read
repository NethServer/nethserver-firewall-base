#!/usr/bin/perl

#
# Copyright (C) 2019 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

use strict;
use warnings;
use esmith::ConfigDB;
use esmith::NetworksDB;
use JSON;

require '/usr/libexec/nethserver/api/lib/helper_functions.pl';
require '/usr/libexec/nethserver/api/nethserver-firewall-base/lib/firewall_functions.pl';

my $input = readInput();
my $cmd = $input->{'action'};

my $ndb = esmith::NetworksDB->open_ro();
if($cmd eq 'classes') {

    my $ret = {"status" => undef};
    my $tdb = esmith::ConfigDB->open_ro("tc");
    my $cdb = esmith::ConfigDB->open_ro();

    my @classes;
    foreach ($tdb->get_all_by_prop('type' => 'class')) {
        my $bindto = $_->prop("BindTo") || '';
        my @binds = split(",",$bindto);
        push(@classes, {
                "name" => $_->key,
                "BindTo" => \@binds,
                "Description" => $_->prop("Description") || '',
                "MaxInputRate" => $_->prop("MaxInputRate") || '',
                "MaxOutputRate" => $_->prop("MaxOutputRate") || '',
                "MinInputRate" => $_->prop("MinInputRate") || '',
                "MinOutputRate" => $_->prop("MinOutputRate") || '',
                "Unit" => $_->prop("Unit") || '%'
            });
    }
    $ret->{'configuration'}{'classes'} = \@classes;

    print encode_json($ret);

} elsif ($cmd eq 'stats') {
    my $ret = {};

    my $time = $input->{'time'} || '30';
    foreach my $provider ($ndb->get_all_by_prop('type' => 'provider'))
    {
        my $name = $provider->key;
        $ret->{$name} = undef;
        foreach my $direction (qw(in out)) {
            my $txt = read_netdata("/api/v1/data?chart=tc.".$name."-$direction&format=csv&before=0&after=-$time&options=abs,seconds");
            if ($txt && index($txt, "Chart is not found") < 0) {
                my @lines = split("\r\n",$txt);
                my @labels = split(",",shift @lines);
                $ret->{$name}{$direction}{'labels'} = \@labels;
                $ret->{$name}{$direction}{'data'} = [];
                foreach my $line (@lines) {
                    my @values = split(",",$line);
                    my @tmp = map(int, @values);
                    push($ret->{$name}{$direction}{'data'}, \@tmp);
                }
            }
        }
        delete $ret->{$name} if (! $ret->{$name});
    }
    print encode_json($ret);
} elsif ($cmd eq 'rules') {

    print encode_json(list_tc_rules($input->{'expand'} || 0, 'class'));

} else {
    error()
}
