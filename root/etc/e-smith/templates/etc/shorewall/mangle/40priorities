#
# 40priorities
# All priority rules are marked inside the post chain.
# If FW is the source, rules are moved to output chain.
#
{
    use NethServer::Firewall;
    use esmith::NetworksDB;
    use esmith::ConfigDB;

    my $fw = new NethServer::Firewall();
    my $ndb = esmith::NetworksDB->open_ro();
    my $tdb = esmith::ConfigDB->open_ro('tc');
    our @providers = $fw->getProviders();

    foreach my $rule ( $fw->getTcRules() ) {
        my $src = $rule->prop("Src") || next;
        my $dst = $rule->prop("Dst") || next;
        my $status = $rule->prop("status") || 'disabled';
        next if ($status eq 'disabled');

        my $mask = '';
        my $action = $rule->prop("Action") || next;
        if ($action =~ /^class;(.*)/) {
            my $class = $tdb->get($1);
            my $mark = $class->prop('Mark') || next;
            $mask = "0x$mark/0x3f";
        } else {
            # skip non-priority rules
            next;
        }
        my $service = $rule->prop("Service") || '';
        my $time = $fw->getTime($rule->prop("Time") || '');

        # skip ndpi rules if ndpi is not enabled
        next if ($fw->isNdpiService($service) && ! $fw->isNdpiEnabled());

        my @src_addr;
        if ($src =~ /role;(.*)/) { # src is an interface
            my $role = $1;
            # red interface can't be used as source
            next if ($role eq 'red');

            # convert roles into interface names
            my @interfaces = $ndb->get_by_role($role);
            foreach(@interfaces) {
                push(@src_addr, $_->key);
            }
        } elsif ($src eq 'any') { # map 'any' keyword to '-'
            push(@src_addr,'-');
        } else { #src is a zone, host, ip address, ip range or CIDR
            my $addr = $fw->getAddress($src, 1) || '';
            push(@src_addr, $addr) if ($addr ne '');
        }

        # dst is a zone, host, ip address, ip range or CIDR
        my $dst_addr = '';
        next if ($dst eq 'any'); # skip rules with destination set to 'any'
        if ($dst eq 'role;red') { # map red role to '-'
            $dst_addr = '-';
        } else {
            next if ($dst =~ /role;/); # skip all other roles
            $dst_addr = $fw->getAddress($dst, 1);
        }

        my $description = $rule->prop('Description') || "RULE#" . $rule->key . " $service";
        foreach(@src_addr) {

            my $chain = ':T';
            if ( $_ eq '$FW') {
                $chain = '';
            }
            my $params = {
                'action' => "MARK($mask)$chain",
                'source' => $_,
                'dest' => $dst_addr,
                'comment' => $description,
                'time' => $time,
                'service' => $service
            };

            $OUT .= $fw->outMangleRule($params);
        }
    }
}
