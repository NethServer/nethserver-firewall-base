#
# 51pflanmasq - Hairpin NAT port forwarding
#
{
    use NethServer::Firewall;
    use esmith::util;
    use esmith::NetworksDB;

    my $hairpin = $firewall{'HairpinNat'} || 'disabled';
    if ($hairpin ne 'enabled') {
        return '';
    }

    my $fw = new NethServer::Firewall();
    my $ndb = esmith::NetworksDB->open_ro();
    $db = esmith::ConfigDB->open("portforward") || die "Can't open portforward database: $!\n";
    foreach my $pf ( $db->get_all_by_prop('type' => 'pf') ) {
        $proto = $pf->prop('Proto') || 'tcp,udp';
        $status = $pf->prop('status') || "disabled";
        next unless ($status eq "enabled");
        $src = $pf->prop('Src') || next;
        $dstHost = $pf->prop('DstHost') || next;
        $srcHost = $pf->prop('SrcHost') || "";
        $srcHost = $fw->getAddress($srcHost);
        $dstHost = $fw->getAddress($dstHost);
        if ($srcHost ne "") {
            $srcHost = "\t-\t$srcHost";
        } else {
            $srcHost = "\t-";
        }

        $dst = $pf->prop('Dst') || '';
        if ($src =~ /:/) { # if src is a range, just use it and discard dst
            $dst = '';
        }
        $description = $pf->prop('Description') || "";
        $allow = $pf->prop('Allow') || "";
        $allow_cmt = "";
        if ($allow ne "") {
            $allow_cmt = "from $allow";
            $allow=":$allow";
        }
        $oriDst = $pf->prop('OriDst') || ''; # external IP
        if ($oriDst ne '') {
            $oriDst = "\t$oriDst";
        } else {
            $oriDst = "\t-";
        }

        my $interface = '';
        foreach ($ndb->get_all()) {
            my $role = $_->prop('role') || next;
            next if ($role eq 'slave' || $role eq 'bridged' || $role eq 'alias' || $role eq 'pppoe');
            my $ipaddr = $_->prop('ipaddr') || next;
            my $netmask = $_->prop('netmask') || next;
            my $haystack = new NetAddr::IP->new($ipaddr, $netmask);
            my $needle = NetAddr::IP->new($dstHost);
            if ($needle->within($haystack)) {
                $interface = $_->key;
                last;
            }
        }
        next if ($interface eq '');

        $OUT.="#\n# PF $oriDst:$src -> $dstHost $allow_cmt \n#\n";
        $OUT.="?COMMENT $description from lan\n";

        foreach ($ndb->get_by_role('green')) {
            my $net = esmith::util::computeLocalNetworkShortSpec($_->prop('ipaddr'),$_->prop('netmask'));
            $OUT .= "SNAT(".$_->prop('ipaddr').")\t$net\t".$interface.":$dstHost\t$proto\t$dst\n";
        }

        foreach ($ndb->get_by_role('blue')) {
            my $net = esmith::util::computeLocalNetworkShortSpec($_->prop('ipaddr'),$_->prop('netmask'));
            $OUT .= "SNAT(".$_->prop('ipaddr').")\t$net\t".$interface.":$dstHost\t$proto\t$dst\n";
        }

        foreach ($ndb->get_by_role('orange')) {
            my $net = esmith::util::computeLocalNetworkShortSpec($_->prop('ipaddr'),$_->prop('netmask'));
            $OUT .= "SNAT(".$_->prop('ipaddr').")\t$net\t".$interface.":$dstHost\t$proto\t$dst\n";
        }
    }
}
