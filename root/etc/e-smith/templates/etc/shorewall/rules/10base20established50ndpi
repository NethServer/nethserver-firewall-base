#
# 10base20established50ndpi
# Duplicate ndpi rules for established section
#
{
    use NethServer::Firewall;

    my $db = esmith::ConfigDB->open_ro("fwrules") || die "Can't open portforward database: $!\n";
    my $fw = new NethServer::Firewall();
    foreach my $rule ( $fw->getRules() ) {
        my $status = $rule->prop("status") || "disabled";
        next unless ($status eq 'enabled');
 
        my $src = $rule->prop("Src") || next; 
        my $dst = $rule->prop("Dst") || next;
        my $action= $rule->prop("Action") || next;
        $action = uc($action);
        my $service = $rule->prop("Service") || '';
        my $log = $rule->prop('Log') || "";

        # skip all non-ndpi rules
        next if (! $fw->isNdpiService($service));
    
        # skip ndpi rules if ndpi is not enabled
        next if (! $fw->isNdpiEnabled());

        my $description = "RULE#" . $rule->key . " " . ($rule->prop('Description') || '');

        # src and dst can be: IP address, host, host-group, zone
        my $src_addr = $fw->getAddress($src);
        my $dst_addr = $fw->getAddress($dst);
        $action .= ":$log" unless ($log eq '');

	# Replace empty values with "-", for column count consistency:
	$src_addr = $src_addr eq '' ? '-' : $src_addr;
	$dst_addr = $dst_addr eq '' ? '-' : $dst_addr;

        my $prefix .= "\n#\n# RULE#" . $rule->key . " $src -> $dst -> $service\n#\n";
        $prefix .= "?COMMENT $description\n";
        $prefix .= "$action\t".$fw->getZone($src_addr)."\t".$fw->getZone($dst_addr);
        if ($fw->isNdpiService($service)) {
            my $proto = $fw->getNdpiProtocol($service) || '';
            next if ($proto eq '');
            $OUT .= $prefix."\t;; -m ndpi --$proto\n";

             # generate also reverse rule
             $OUT .= "$action\t".$fw->getZone($dst_addr)."\t".$fw->getZone($src_addr)."\t;; -m ndpi --$proto\n";
        } 
    }
}

