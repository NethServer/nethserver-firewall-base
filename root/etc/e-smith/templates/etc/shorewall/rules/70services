{
    # support for old access property
    sub accessToZones
    {
        my $access = shift;
        my @zones;
        if ($access eq 'none') {
           return @zones;
        } elsif ($access eq 'private') {
            push(@zones, 'green');
        } elsif ($access eq 'public') {
            push(@zones, 'green');
            push(@zones, 'red');
        } else {
            @zones = split(',',$access);
        }

        return @zones;
    }

    sub acceptRules
    {
        my $name = shift;
        my $type = shift;
        my $port = shift;
        my $zones = shift;
        my $nfq = $firewall{'nfqueue'} || 'disabled';
        my $action = 'ACCEPT';
        if ($nfq eq 'enabled') {
            $action = 'NFQBY';
        }
        $OUT.="?COMMENT $name \n";
        foreach (@$zones) {
            $_ =~ s/^green$/loc/;
            $_ =~ s/^red$/net/;
            $_ = substr($_, 0, 5);
            if ($_ eq 'net' || $_ eq 'loc' || $fw->isZone($_)) {
                $OUT.="$action\t$_\t\$FW\t$type\t$port\n";
            }
        }

    }

    use NethServer::Service;
    use NethServer::Firewall;
    use esmith::ConfigDB;
    our $fw = NethServer::Firewall->new();
    my $confDb = esmith::ConfigDB->open();

    foreach my $serviceRecord ($confDb->get_all_by_prop('type' => 'service')) {
        my $access = $serviceRecord->prop('access') || 'none';
        my @zones = accessToZones($access);
        my $tcpPorts = $serviceRecord->prop('TCPPorts') || $serviceRecord->prop('TCPPort') || '';
        my $udpPorts = $serviceRecord->prop('UDPPorts') || $serviceRecord->prop('UDPPort') || '';
        if (! @zones) {
            $OUT.="#\n#\tService: ".$serviceRecord->key." Access: NONE\n#\n";
            next;
        }
        if($tcpPorts || $udpPorts) {
            if( ! NethServer::Service::is_enabled($serviceRecord->key) ) {
                next;
            }
            $OUT.="#\n#\tService: ".$serviceRecord->key." Access: $access\n#\n"; 
            foreach my $port (split(',', $tcpPorts)) {
                acceptRules($serviceRecord->key, 'tcp', $port, \@zones);
            }
            foreach my $port (split(',', $udpPorts)) {
                acceptRules($serviceRecord->key, 'udp', $port, \@zones);
            }
        }
    }
}
