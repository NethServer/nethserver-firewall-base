{
    # support for old access property
    sub accessToZones
    {
        my $access = shift;
        my @zones;
        if ($access eq 'none') {
           return @zones;
        } elsif ($access eq 'private') {
            push(@zones, 'green');
        } elsif ($access eq 'public') {
            push(@zones, 'green');
            push(@zones, 'red');
        } else {
            @zones = split(',',$access);
        }

        return @zones;
    }

    sub acceptRules
    {
        my $name = shift;
        my $type = shift;
        my $port = shift;
        my $zones = shift;
        $OUT.="?COMMENT $name \n";
        foreach (@$zones) {
            $_ =~ s/green/loc/;
            $_ =~ s/red/net/;
            $_ = substr($_, 0, 5);
            if ($fw->isZone($_)) {
                $OUT.="ACCEPT\t$_\t\$FW\t$type\t$port\n";
            }
        }

    }

    use NethServer::Service;
    use NethServer::Firewall;
    use esmith::ConfigDB;
    our $fw = NethServer::Firewall->new();
    my $confDb = esmith::ConfigDB->open();
    my $accept = 'ACCEPT';
    my $nfqueue = $firewall{'nfqueue'} || 'disabled';
    if ($nfqueue eq 'enabled') {
        $accept = 'NFQBY';
        # SSH and HTTPD-ADMIN exeception: do not filter ssh from local network
        $OUT.="#\n#\tAllow administration from local network\n#\n";
        $OUT .= "?COMMENT always accept sshd from loc\n";
        $OUT.="ACCEPT\tloc\t\$FW\ttcp\t".$sshd{'TCPPort'}."\n";
        $OUT .= "?COMMENT always accept httpd-admin from loc\n";
        $OUT.="ACCEPT\tloc\t\$FW\ttcp\t".${'httpd-admin'}{'TCPPort'}."\n";
    }

    foreach my $serviceRecord ($confDb->get_all_by_prop('type' => 'service')) {
        my $access = $serviceRecord->prop('access') || 'green';
        my @zones = accessToZones($access);
        my $tcpPorts = $serviceRecord->prop('TCPPorts') || $serviceRecord->prop('TCPPort') || '';
        my $udpPorts = $serviceRecord->prop('UDPPorts') || $serviceRecord->prop('UDPPort') || '';
        if (! @zones) {
            $OUT.="#\n#\tService: ".$serviceRecord->key." Access: NONE\n#\n";
            next;
        }
        if($tcpPorts || $udpPorts) {
            if( ! NethServer::Service::is_enabled($serviceRecord->key) ) {
                next;
            }
            $OUT.="#\n#\tService: ".$serviceRecord->key." Access: $access\n#\n"; 
            foreach my $port (split(',', $tcpPorts)) {
                my $allow = $serviceRecord->prop('AllowHosts') || '';
                my $deny = $serviceRecord->prop('DenyHosts') || '';
                $port =~ s/\-/:/g;
                # Always deny from hosts listed in DenyHosts
                foreach my $host (split(/,/,$deny)) {
                    my $addr = $fw->getAddress($host);
                    $OUT.="?COMMENT deny ".$serviceRecord->key." access from $host\n"; 
                    $OUT.="REJECT\t".$fw->getZone($host)."\t\$FW\ttcp\t$port\n";
                }
                # Always accept from hosts listed in AllowHosts
                foreach my $host (split(/,/,$allow)) {
                    my $addr = $fw->getAddress($host);
                    $OUT.="?COMMENT allow ".$serviceRecord->key." access from $host\n"; 
                    $OUT.="$accept\t".$fw->getZone($host)."\t\$FW\ttcp\t$port\n";
                }
                acceptRules($serviceRecord->key, 'tcp', $port, \@zones);
            }
            foreach my $port (split(',', $udpPorts)) {
                my $allow = $serviceRecord->prop('AllowHosts') || '';
                my $deny = $serviceRecord->prop('DenyHosts') || '';
                $port =~ s/\-/:/g;
                # Always deny from hosts listed in DenyHosts
                foreach my $host (split(/,/,$deny)) {
                    my $addr = $fw->getAddress($host);
                    $OUT.="?COMMENT deny ".$serviceRecord->key." access from $host\n"; 
                    $OUT.="REJECT\t".$fw->getZone($host)."\t\$FW\tudp\t$port\n";
                }
                # Always accept from hosts listed in AllowHosts
                foreach my $host (split(/,/,$allow)) {
                    my $addr = $fw->getAddress($host);
                    $OUT.="?COMMENT allow ".$serviceRecord->key." access from $host\n"; 
                    $OUT.="$accept\t".$fw->getZone($host)."\t\$FW\tudp\t$port\n";
                }
                acceptRules($serviceRecord->key, 'udp', $port, \@zones);
            }
        }
    }
}
